@page "/"
@using AppBlazor.Client.Servicios.RepresentantesSrevicios
@using AppBlazor.Entities.RepresentanteClS
@using AppBlazor.Entities.ClienteCLS
@using AppBlazor.Client.Servicios.ClientesServicios;
@inject NavigationManager navigationManager;
@inject RepresentantesServicio RepresentantesServicio;
@inject ClienteServicio clienteServicio;
@inject SucursalRepresentanteServicio sucursalRepresentanteServicio;
@inject DirectorServicio directorservicio;

<h3>Representantes</h3>

<SearchRepresentante></SearchRepresentante>

<div class="container-fluid">
    <table class="table">
        <tr>
            <th>Num. Empleado</th>
            <th>Nombre</th>
            <th>Edad</th>
            <th>Cargo</th>
            <th>Fecha de Contrato</th>
            <th>Cuota</th>
            <th>Ventas</th>
            <th>Sucursal</th>
            <th>Director</th>
            <th>Opciones</th>
        </tr>

        <tbody>
            @foreach (var item in lstRepresentantes)
            {
                <tr>
                    <td>@item.Num_Empl</td>
                    <td>@item.Nombre</td>
                    <td>@item.Edad</td>
                    <td>@item.Cargo</td>
                    <td>@item.FechaContrato</td>
                    <td>@item.Cuota</td>
                    <td>@item.Ventas</td>
                    <td>@listaSucursales.Where(p => p.idSucursal == item.idSucursal).FirstOrDefault()!.surcursal</td>
                    <td>@listadirector.Where(p => p.IDdirector == item.idDirector).FirstOrDefault()!.Director</td>
                    <td>
                        <button @onclick=" () => eliminar(item.Num_Empl)"
                                class="btn alert-danger">
                            Eliminar
                        </button>
                        <button @onclick="() => editar(item.Num_Empl)" class="btn alert-success">Editar</button>
                    </td>
                </tr>
            }
            
        </tbody>
        
    </table>
</div>

<button class="btn btn-primary" @onclick="navegar">
    Agregar representante
</button>


@code {
    private List<RepresentanteFormCLS> lstRepresentantes = new();
    private List<SucursalRepresentanteCLS> listaSucursales = new();
    private List<DirectorCLS> listadirector = new();
    private List<ClienteCLS> ListaClientes = new();

    protected override Task OnInitializedAsync()
    {
        RepresentantesServicio.OnSearch += filtrar;
        return base.OnInitializedAsync();
    }

    private Task filtrar (string nombre)
    {
        lstRepresentantes = RepresentantesServicio.filtrarRepresenatntes(nombre);
        StateHasChanged();
        return Task.CompletedTask;
    }

    protected override void OnInitialized()
    {
        listarRepresentantes();
    }
    private void listarRepresentantes()
    {
        listadirector = directorservicio.listarDirector();
        listaSucursales = sucursalRepresentanteServicio.listarSucursales();
        lstRepresentantes = RepresentantesServicio.ObtenerRepresentante();
        ListaClientes = clienteServicio.ObtenerClientes();
    } 




    private void navegar()
    {
        navigationManager.NavigateTo("/formRepresentantes");
    }
    private void eliminar(int idRepresentante)
    {
        var obj = ListaClientes.Where(p => p.IdRepresentante == idRepresentante).FirstOrDefault();
        {
            if (obj == null)
            {
                var listaqueda = RepresentantesServicio.Eliminar(idRepresentante);
                listarRepresentantes();
            }
            else
            {
                Console.WriteLine("No se puede eliminar el representante porque tiene clientes asignados");
            }
        }

        
    } 
    private void editar(int idlibro)
    {
        navigationManager.NavigateTo("/formRepresentantes/editar/"+idlibro);
    }
    
}

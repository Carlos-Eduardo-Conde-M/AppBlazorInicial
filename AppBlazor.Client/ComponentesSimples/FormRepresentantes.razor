@using AppBlazor.Client.Servicios.RepresentantesSrevicios
@using AppBlazor.Entities.RepresentanteClS

@inject NavigationManager NavigationManager;
@inject RepresentantesServicio RepresentantesServicio;
@inject SucursalRepresentanteServicio suscursalRepresentanteServicio;
@inject DirectorServicio directorServicio;

<h3>@titulo</h3>


<EditForm Model="@representanteForm" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="mt-3">
        <label>Número de empleado (*)</label>
        <InputNumber readonly class="form-control" @bind-Value="representanteForm.Num_Empl" placeholder="Ingrese el número de empleado" />
        <ValidationMessage For="@(() => representanteForm.Num_Empl)" />
    </div>
    <div class="mt-3">
        <label>Nombre del empleado (*)</label>
        <InputText class="form-control" @bind-Value="representanteForm.Nombre" placeholder="Ingrese el nombre del empleado" />
        <ValidationMessage For="@(() => representanteForm.Nombre)" />
    </div>
    <div class="d-flex gap-3">
        <div class="mt-3">
            <label>Edad del empleado</label>
            <InputNumber class="form-control" @bind-Value="representanteForm.Edad" placeholder="Ingrese la edad del empleado (opcional)" />
            <ValidationMessage For="@(() => representanteForm.Edad)" />
        </div>
        <div class="mt-3">
            <label>Fecha de Contratación del empleado (*)</label>
            <InputDate class="form-control" @bind-Value="representanteForm.FechaContrato" />
            <ValidationMessage For="@(() => representanteForm.FechaContrato)" />
        </div>
    </div>
    <div class="d-flex gap-3">
        <div class="mt-3">
            <label>Cargo del empleado (*)</label>
            <InputSelect class="form-control" @bind-Value="representanteForm.Cargo" onchange="@CambiarSeleccion">
                <option value="">Seleccione una opcion</option>
                @foreach (var cargo in cargos)
                {
                    <option value="@cargo">@cargo</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => representanteForm.Cargo)" />
        </div>
        <div class="mt-3">
            <label>Cuota del empleado (*)</label>
            <InputNumber class="form-control" @bind-Value="representanteForm.Cuota" placeholder="Ingrese el porcentaje que se llevará el empleado por venta" />
            <ValidationMessage For="@(() => representanteForm.Cuota)" />
        </div>
    </div>

    <div class="mt-3">
        <label>Ventas del empleado (*)</label>
        <InputNumber class="form-control" @bind-Value="representanteForm.Ventas" placeholder="Ingrese la cantidad de ventas " />
        <ValidationMessage For="@(() => representanteForm.Ventas)" />
    </div>

    <div class="mt-3">

        <label>Seleccione la Sucursal</label>
        <InputSelect class="form-control" @bind-Value="@representanteForm.idSucursal">
            
            <option value="0">--Seleccione--</option>
            @foreach (var item in listaSucursales)
            {
                <option value="@item.idSucursal">@item.surcursal</option>
            }

        </InputSelect>
        <ValidationMessage For="(() => representanteForm.idSucursal)"></ValidationMessage>

    </div>



    <div class="mt-3">

        <label>Seleccione el Director</label>
        <InputSelect class="form-control" @bind-Value="@representanteForm.idDirector">

            <option value="0">--Seleccione--</option>
            @foreach (var item in listadirector)
            {
                <option value="@item.IDdirector">@item.Director</option>
            }

        </InputSelect>
        <ValidationMessage For="(() => representanteForm.idDirector)"></ValidationMessage>

    </div>



    <div class="mt-3">
        <button type="submit" class="btn btn-primary" @onclick="Guardar"> Guardar</button>
        <button class="btn btn-danger" @onclick="Regresar"> Regresar</button>
    </div>
    
</EditForm>
@code {
    private RepresentanteFormCLS representanteForm { get; set; } = new();
    public string titulo { get; set; } = "";

    [Parameter]
    public int idRepresentante { get; set; }

    private string[] cargos = { "Vendedor", "Supervisor", "Gerente", "Pasante de sistemas" };

    public List<SucursalRepresentanteCLS> listaSucursales { get; set; } = new List<SucursalRepresentanteCLS>();
    public List<DirectorCLS> listadirector { get; set; } = new List<DirectorCLS>();

    protected override Task OnInitializedAsync()
    {

        listaSucursales = suscursalRepresentanteServicio.listarSucursales();
        listadirector = directorServicio.listarDirector();

        if (idRepresentante == 0) titulo = "Agregar Representantes";
        else
        {
            titulo = "Editar Representante";
            representanteForm = RepresentantesServicio.recuperaRepresentanteporID(idRepresentante);

        }
        return base.OnInitializedAsync();
    }

    public void Guardar()
    {
        if (titulo == "Agregar Representantes")
        {
            RepresentantesServicio.AgregarRepresentante(representanteForm);
            NavigationManager.NavigateTo("/");
        }
        else
        {
            RepresentantesServicio.ActualizarRepresentante(representanteForm);
            NavigationManager.NavigateTo("/");
        }

    }

    public void Regresar()
    {
        NavigationManager.NavigateTo("/");
    }

    public void CambiarSeleccion(ChangeEventArgs e)
    {
        representanteForm.Cargo = e.Value.ToString() ?? "No asignado";
    }
}
